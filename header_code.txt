<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        nav {
            background-color: #862a2a;
            padding: 5px;

            font-size: 8px;
            color: #ffffff;
            display: flex;
            /* Use Flexbox to create columns */
        }

        h1 {
            font-size: 24px;
            font-weight: bold;
        }

        h2 {
            font-size: 15px;
        }

        .column {
            flex: 1;
            /* Distribute available space equally among columns */
            margin: 0px 0px;
            padding-top: 0%;
            font-size: 10;
        }

        #filesdownload {
            padding: 0% 5px;
            margin: 55px 10px;
            border: 3px solid grey;
            cursor: pointer;
            transition: transform 0.2s;
        }

        #filesdownload:hover {
            transform: scale(1.1);
        }
    </style>
</head>

<body>
    <nav>
        <div class="column" id="column1">
            <!-- Content will be updated here -->
        </div>
        <div class="column" id="column2">
            <!-- Content will be updated here -->
        </div>

        <button id="filesdownload">Downlaod Files</button>

    </nav>

    <script>
        // Simulated data from the backend
        const data = {
            column1: [
                { name: "Name", content: "John" },
                { name: "Age", content: "" },
                { name: "Location", content: "" },
                { name: "Program", content: "" },
                { name: "Time Period", content: "" },
                // ... Other items
            ],
            column2: [
                { name: "Account No.", content: "" }, // Placeholder for Account No.
                { name: "UCIC_ID", content: "" },
                { name: "Occupation", content: "" },
                { name: "Account Type", content: "" },
                // ... Other items
            ]
        };

        // Function to read and parse CSV file using Fetch API
        async function readCSVFile(filePath) {
            try {
                const response = await fetch(filePath);
                if (!response.ok) {
                    throw new Error(`Failed to fetch CSV file: ${response.status} ${response.statusText}`);
                }

                const csvContent = await response.text();
                const lines = csvContent.trim().split('\n');
                const headers = lines[0].split(',');

                const csvData = lines.slice(1).map(line => {
                    const values = line.split(',');
                    const entry = {};
                    headers.forEach((header, index) => {
                        entry[header] = values[index];
                    });
                    return entry;
                });

                return csvData;
            } catch (error) {
                console.error('Error reading CSV file:', error);
                return [];
            }
        }

        // Read CSV file content
        const csvFilePath = 'newcsvfile.csv';
        readCSVFile(csvFilePath)
            .then(csvData => {
                // Match Account No. and update content
                const accountNoColumn = data.column2.find(item => item.name === 'Account No.');
                if (accountNoColumn) {
                    console.log('i reached here')
                    const accountNoData = csvData.find(entry => entry.ACCT_NO);
                    if (accountNoData) {
                        accountNoColumn.content = accountNoData.ACCT_NO;
                        updateColumnContent('column2', data.column2);
                        updateColumnContent('column1', data.column1);
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });

        // Function to update content of a column
        function updateColumnContent(columnId, contentArray) {
            const columnElement = document.getElementById(columnId);
            columnElement.innerHTML = contentArray.map(item => `<h2>${item.name}: ${item.content}</h2>`).join('');
        }
    </script>
</body>

</html>